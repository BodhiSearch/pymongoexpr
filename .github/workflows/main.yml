name: pymongoexpr

on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - v*
  workflow_dispatch:
    branches:
      - main
    inputs:
      release:
        description: 'Release version (yes/no/pre)?'
        required: false
        default: 'no'

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python with Poetry
        uses: './.github/actions/setup'
        with:
          setup-only: 'true'

  pre-commit:
    needs: [prepare]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python with Poetry
        uses: './.github/actions/setup'
      - name: Check poetry files
        shell: bash
        run: |
          make check
      - name: Pre-commit
        uses: pre-commit/action@v3.0.0

  test:
    needs: [prepare]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python with Poetry
        uses: './.github/actions/setup'
      - name: Copy .env.ci to .env.test
        run: cp .env.ci .env.test
      - name: Run tests
        run: make test
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          env_vars: OS,PYTHON
          files: ./coverage.xml
          flags: unittests
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  prerelease:
    needs: [pre-commit, test]
    if: github.event.inputs.release == 'pre'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python with Poetry
        uses: './.github/actions/setup'
      - name: Get current version
        id: current-version
        run: |
          echo "CURRENT_VERSION=$(poetry version --short)" >> $GITHUB_ENV
      - name: Set new pre-release version
        id: new-version
        run: |
          echo "NEW_VERSION=${{ env.CURRENT_VERSION }}-$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
      - name: Update version to pre-release version
        run: |
          # Using poetry's version command to set a new version
          poetry version "${{ env.NEW_VERSION }}"
          # Overwrite the _version.py file with the new version
          echo "__version__ = \"${{ env.NEW_VERSION }}\"" >> pymongoexpr/_version.py
      - name: Build package
        run: make build
      - name: Create pre-release
        uses: ncipollo/release-action@v1
        with:
          artifacts: 'dist/*'
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ env.NEW_VERSION }}
          prerelease: true

  release:
    needs: [pre-commit, test]
    if: github.event.inputs.release == 'yes'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python with Poetry
        uses: './.github/actions/setup'
      - name: Get current version
        id: current-version
        run: |
          echo "CURRENT_VERSION=$(poetry version --short)" >> $GITHUB_ENV
      - name: Build package
        run: make build
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: 'dist/*'
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ env.CURRENT_VERSION }}
          commit: main
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          print-hash: true
      - name: Bump patch version
        run: |
          IFS='.' read -ra ADDR <<< "$CURRENT_VERSION"
          new_patch=$(( ${ADDR[2]} + 1 ))
          NEW_VERSION="${ADDR[0]}.${ADDR[1]}.$new_patch"
          poetry version "$NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

          # Overwrite the _version.py file with the new version
          echo "# this file is automatically generated and overwritten by CI process" > pymongoexpr/_version.py
          echo "# modify the CI workflow file - .github/workflows/main.yml, job: \"Bump patch version\"" >> pymongoexpr/_version.py
          echo "__version__ = \"$NEW_VERSION\"" >> pymongoexpr/_version.py
      - name: Commit and push changes
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<github-actions@users.noreply.github.com>"
          git add pyproject.toml
          git add pymongoexpr/_version.py
          git commit -m "[Github Workflows] bumping up the patch version to ${NEW_VERSION}"
          git push
